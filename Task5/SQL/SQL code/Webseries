select * from episode
select * from series
--Q.1. Objective: Create a PostgreSQL function to compute an episode’s impact score, then use it to analyze series performance, highlighting top episodes and genre trends.
--Task Description:
--Use the series and episode tables.
--Create a function calculate_impact_score with parameters:
--rating : Episode rating.
--air_date : Episode air date.
--Return a NUMERIC score (rounded to 2 decimals): rating * 5 + months_since_air / 12, where months_since_air is months from air_date to current date. Use COALESCE to return 0 if rating is null.
--categorize episodes: ‘High Impact’ if score ≥ 45, ‘Moderate’ if ≥ 40, else ‘Low’.
--Expected output:
--series_name	episode_title	impact_score	episode_category	rank	high_rated_episodes		avg_series_rating
--Breaking Bad	Pilot		46.33		High Impact		1	Pilot, Seven Thirty-Seven	8.5

--(For creating table)
CREATE OR REPLACE FUNCTION calculate_impact_score(rating NUMERIC, air_date DATE)
RETURNS NUMERIC AS $$
DECLARE
    months_since_air INT;
    score NUMERIC;
BEGIN
    months_since_air := DATE_PART('year', CURRENT_DATE) * 12 + DATE_PART('month', CURRENT_DATE)
                        - (DATE_PART('year', air_date) * 12 + DATE_PART('month', air_date));

    score := COALESCE(rating, 0) * 5 + (months_since_air / 12.0);
    RETURN ROUND(score, 2);
END;
$$ LANGUAGE plpgsql;



--(For Querry)
WITH episode_scores AS (
    SELECT
        e.episode_id,
        s.series_name,
        e.episode_title,
        calculate_impact_score(e.rating, e.air_date) AS impact_score,
        CASE
            WHEN calculate_impact_score(e.rating, e.air_date) >= 45 THEN 'High Impact'
            WHEN calculate_impact_score(e.rating, e.air_date) >= 40 THEN 'Moderate'
            ELSE 'Low'
        END AS episode_category,
        e.rating,
        s.series_id
    FROM episode e
    JOIN series s ON e.series_id = s.series_id
),
avg_ratings AS (
    SELECT series_id, ROUND(AVG(rating), 2) AS avg_series_rating
    FROM episode
    GROUP BY series_id
),
ranked_episodes AS (
    SELECT *,
           RANK() OVER (PARTITION BY series_id ORDER BY impact_score DESC) AS rank
    FROM episode_scores
),
high_rated AS (
    SELECT
        series_id,
        STRING_AGG(episode_title, ', ' ORDER BY impact_score DESC) AS high_rated_episodes
    FROM ranked_episodes
    WHERE episode_category = 'High Impact'
    GROUP BY series_id
)

SELECT
    r.series_name,
    r.episode_title,
    r.impact_score,
    r.episode_category,
    r.rank,
    h.high_rated_episodes,
    a.avg_series_rating
FROM ranked_episodes r
LEFT JOIN high_rated h ON r.series_id = h.series_id
LEFT JOIN avg_ratings a ON r.series_id = a.series_id
WHERE r.rank <= 3  -- Show top 3 per series
ORDER BY r.series_name, r.rank;

--2.Create a PostgreSQL function to evaluate episode longevity, then use it to analyze series episode trends and genre popularity.
--Task Description:
--Use the series and episode tables.
--Create a function calculate_longevity_score in the public schema with parameters:
--rating : Episode rating.
--season_number : Season number.
--Return a NUMERIC score (rounded to 2 decimals): rating * 3 + season_number * 2. Use COALESCE to return 0 if rating is null.
--In the main query:
--Use the function to compute each episode’s longevity score.
--Use CASE to label episodes: ‘Long-Lasting’ if score ≥ 30, ‘Moderate’ if ≥ 25, else ‘Short-Lived’.
--Use a window function to count episodes per series.
--Use STRING_AGG to list genres of series with episodes aired after 2015 (alphabetically), or ‘None’ if none.
--Display: series name, episode title, longevity score, episode label, episode count, recent genres, total seasons per series.
--Order by series name, longevity score (descending).
--Expected Output:
--series_name	episode_title	longevity_score	episode_label	episode_count	recent_genres	total_seasons
--Breaking Bad	No Más	        31.50	        Long-Lasting	3		Action, Sci-Fi	3


-- Step 1: Create function

CREATE OR REPLACE FUNCTION public.calculate_longevity_score(rating NUMERIC, season_number INT)
RETURNS NUMERIC AS $$
DECLARE
    score NUMERIC;
BEGIN
    score := COALESCE(rating, 0) * 3 + season_number * 2;
    RETURN ROUND(score, 2);
END;
$$ LANGUAGE plpgsql;

-- Step 2: Query with Rating

WITH longevity_scores AS (
    SELECT
        s.series_id,
        s.series_name,
        s.genre,
        e.episode_title,
        e.rating,  -- Include episode rating
        calculate_longevity_score(e.rating, e.season_number) AS longevity_score,
        CASE
            WHEN calculate_longevity_score(e.rating, e.season_number) >= 30 THEN 'Long-Lasting'
            WHEN calculate_longevity_score(e.rating, e.season_number) >= 25 THEN 'Moderate'
            ELSE 'Short-Lived'
        END AS episode_label,
        e.season_number,
        e.air_date
    FROM episode e
    JOIN series s ON e.series_id = s.series_id
),
episode_counts AS (
    SELECT
        series_id,
        COUNT(*) AS episode_count,
        MAX(season_number) AS total_seasons
    FROM episode
    GROUP BY series_id
)

SELECT
    ls.series_name,
    ls.episode_title,
    ls.rating,
    ls.longevity_score,
    ls.episode_label,
    ec.episode_count,
    COALESCE((
        SELECT STRING_AGG(DISTINCT s2.genre, ', ' ORDER BY s2.genre)
        FROM episode e2
        JOIN series s2 ON e2.series_id = s2.series_id
        WHERE e2.air_date > DATE '2015-01-01'
        AND s2.series_id = ls.series_id
    ), 'No Episodes') AS recent_genres,
    ec.total_seasons
FROM longevity_scores ls
JOIN episode_counts ec ON ls.series_id = ec.series_id
ORDER BY ls.series_name, ls.longevity_score DESC;

--3.Create a PostgreSQL function to assess episode rating consistency, then use it to analyze series performance and episode trends.
--Task Description:
--Use the series and episode tables.
--Create a function calculate_rating_consistency in the public schema with parameters:
--rating : Episode rating.
--series_avg_rating : Average rating of the series.
--Return a NUMERIC absolute score : (rating - series_avg_rating) * 10. Use COALESCE to return 0 if rating or series_avg_rating is null.
--In the main query:
--Use the function to compute each episode’s rating consistency score .
--Use CASE to categorize episodes: ‘Consistent’ if score ≤ 5, ‘Variable’ if ≤ 15, else ‘Highly Variable’.
--Use a window function to rank episodes by rating within each season (descending).
--Use STRING_AGG to list episode titles (alphabetically) aired in the last 10 years (since June 1, 2015), or ‘None’ if none.
--Display: series name, episode title, consistency score, consistency category, season rank, recent episodes, max series rating.
--Order by series name, consistency score.
--Expected Output:
--series_name	episode_title	consistency_score	consistency_category	season_rank	recent_episodes		max_series_rating
--Breaking Bad	Seven 		Thirty-Seven		1.00			Consistent	1			8.7


--(Create the function)

CREATE OR REPLACE FUNCTION public.calculate_rating_consistency(
    rating NUMERIC,
    series_avg_rating NUMERIC
)
RETURNS NUMERIC AS $$
DECLARE
    score NUMERIC;
BEGIN
    score := ABS(COALESCE(rating, 0) - COALESCE(series_avg_rating, 0)) * 10;
    RETURN ROUND(score, 2);
END;
$$ LANGUAGE plpgsql;

--(query)

WITH series_stats AS (
    SELECT
        series_id,
        MAX(rating) AS max_series_rating,
        AVG(rating) AS avg_series_rating
    FROM episode
    GROUP BY series_id
),
episode_data AS (
    SELECT
        s.series_name,
        e.episode_title,
        e.rating,
        e.series_id,
        e.season_number,
        e.air_date,
        ss.avg_series_rating,
        ss.max_series_rating,
        calculate_rating_consistency(e.rating, ss.avg_series_rating) AS consistency_score
    FROM episode e
    JOIN series s ON e.series_id = s.series_id
    JOIN series_stats ss ON e.series_id = ss.series_id
),
ranked_episodes AS (
    SELECT *,
        RANK() OVER (PARTITION BY series_id, season_number ORDER BY rating DESC) AS season_rank,
        CASE
            WHEN calculate_rating_consistency(rating, avg_series_rating) <= 5 THEN 'Consistent'
            WHEN calculate_rating_consistency(rating, avg_series_rating) <= 15 THEN 'Variable'
            ELSE 'Highly Variable'
        END AS consistency_category
    FROM episode_data
)
SELECT
    r.series_name,
    r.episode_title,
    r.consistency_score,
    r.consistency_category,
    r.season_rank,
    COALESCE((
        SELECT STRING_AGG(e2.episode_title, ', ' ORDER BY e2.episode_title)
        FROM episode e2
        WHERE e2.series_id = r.series_id
          AND e2.air_date >= DATE '2015-06-01'
    ), 'No episodes') AS recent_episodes,
    r.max_series_rating
FROM ranked_episodes r
ORDER BY r.series_name, r.consistency_score;